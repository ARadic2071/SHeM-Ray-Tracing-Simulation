function [cntr, killed, diedNaturally, final_pos, final_dir, ...
          numScattersRayDetect, numScattersRay] = ...
    trace_rays(ray_pos, ray_dir, sample_surface, maxScatter, ...
               pinhole_surface, scan_pos_x, scan_pos_z, make_sphere, ...
               dist_to_sample, sphere_r, diffuse)
% Copyright (c) 2018, Sam Lambrick.
% All rights reserved.
% This file is part of the SHeM Ray Tracing Simulation, subject to the 
% GNU/GPL-3.0-or-later.
%
% [cntr, killed, diedNaturally, final_pos, final_dir, middle, second_last, 
%       numScattersRayDetect, numScattersRay] = 
%   trace_rays(ray_pos, ray_dir, sample_surface, theDetector, maxScatter)
% 
% MATLAB wrapper for the mex function tracingMex.c, in general should not
% be called directly, but via one of the functions that perform overall 
% simulations: singlePixel, lineScan, rectangularScan. This function, and 
% tracingMex.c perform a single pixel simulation, but do not output results in 
% an easy to use form.
%
% INPUTS:
%  ray_pos         - A nx3 array of initial ray positions usually generated by
%                    the function create_strating_rays.m 
%  ray_dir         - A nx3 array of initial ray directions usually generated by
%                    the function create_strating_rays.m
%  sample_surface  - A TriagSurface object containing the triangulated mesh
%                    surface of the sample
%  maxScatter      - The maximum number of sample scatters any single ray is
%                    permitted to undergo
%  pinhole_surface - A TriagSurface object containing the triangulated mesh of
%                    the pinhole plate
%  scan_pos_x      - The x position of the scan, for manipulating the analytic
%                    sphere, if it is used, into the correct place
%  scan_pos_z      - The z position of the scan
%  make_sphere     - 1/0, is the analytic sphere to be included
%  dist_to_sample  - The sample-pinhole plate distance, used if the analytic
%                    sphere is included
%  sphere_r        - The radius of the analytic sphere
%  diffuse         - the scattering off of the analytic sphere, if it is used.
%                    [0,1] or 2
%
% OUTPUTS:
%  cntr                 - The number of rays that were detected
%  killed               - The number of rays that had to be forcibly stoped
%                         becuase they exceed the allowed number of scatters
%  diedNaturally        - The number of rays that left the area of
%                         simulation by not hitting the sample or the 
%                         pinhole plate
%  final_pos            - A matrix of the positions where the detected rays
%                         are detected
%  final_dir            - A matrix of the directions the rays were travelling
%                         in when they are detected
%  numScattersRayDetect - The number of scattering events that each detected ray
%                         underwent
%  numScattersRay       - The number of scattering events that each ray
%                         underwent
    
    % MATLAB stores matrices by column then row C does row then column. Must
    % take the traspose of the 2D arrays
    ray_posT = ray_pos';
    ray_dirT = ray_dir';
    VT = sample_surface.vertices';
    FT = sample_surface.faces';
    NT = sample_surface.normals';
    CT = sample_surface.composition;
    
    VTS = pinhole_surface.vertices';
    FTS = pinhole_surface.faces';
    NTS = pinhole_surface.normals';
    CTS = pinhole_surface.composition;
    
    % Need to know how deep the pinhole plate is, how wide it is and how high it
    % is, this is used in determining if rays are detected, this assumes that
    % the pinhole plate is rectangular and is centered on the origin (in x-z)
    backWall = [max(pinhole_surface.vertices(:,2)), ...
        range(pinhole_surface.vertices(:,1)), ...
        range(pinhole_surface.vertices(:,3))];
    
    % The calling of the mex function, ... here be dragons ... don't fiddle
    [cntr, killed, final_pos, final_dir, numScattersRay]  = ...
        tracingMex(ray_posT, ray_dirT, VT, FT, NT, CT, maxScatter, VTS, FTS, ...
                   NTS, CTS, backWall, scan_pos_x, scan_pos_z, make_sphere, ...
                   dist_to_sample, sphere_r, diffuse);
    
    % The number of rays that died naturally, rather than being 'killed'
    % because they scattered too many times.
    diedNaturally = size(ray_pos, 1) - cntr - killed;
    
    % Need to transpose the results back into the format we want
    final_pos = final_pos';
    final_dir = final_dir';
    
    % Need to remove the excess zeros from these arrays
    TF = all(final_pos(:,1),2);
    final_pos = final_pos(TF,:);
    final_dir = final_dir(TF,:);
    numScattersRayDetect = numScattersRay(TF);
end

